<?php/*Plugin Name: Moviesdescription: Plugin enables custom post type MoviesVersion: 1.0Author: Nemanja Janjic*//*====================================================================Register Post Type Movies=====================================================================*/function custom_post_movies(){    $labels = array(        'name' => _x('Movies', 'post type general name'),        'singular_name' => _x('Movie', 'post type singular name'),        'add_new' => _x('Add New', 'movie'),        'add_new_item' => __('Add New Movie'),        'edit_item' => __('Edit Movie'),        'new_item' => __('New Movie'),        'all_items' => __('All Movies'),        'view_item' => __('View Movie'),        'search_items' => __('Search Movie'),        'not_found' => __('No movies found'),        'not_found_in_trash' => __('No movies found in the Trash'),        'menu_name' => 'Movies'    );    $args = array(        'labels' => $labels,        'description' => 'Holds our movies and movies specific data',        'public' => true,        'show_in_rest' => true, // Enable the REST AP        'hierarchical' => false,        'has_archive' => true,        'menu_position' => 5,        'menu_icon' => 'dashicons-format-video',        'supports' =>            array(                'title',                'editor',                'thumbnail',                'excerpt',                'comments',                'revisions'            ),        'register_meta_box_cb' => 'add_movie_metaboxes',    );    register_post_type('movie', $args);}add_action('init', 'custom_post_movies');/*====================================================================Movies Meta box=====================================================================*/add_action('add_meta_boxes', 'add_movie_metaboxes');/** * Adds a metabox to the right side of the screen */function add_movie_metaboxes(){    add_meta_box(        'movie_title',        'Movie Title',        'movie_title',        'movie',        'side',        'default'    );}/*====================================================================Output the HTML for the metabox.====================================================================*/function movie_title(){    global $post;    // Nonce field to validate form request came from current site    wp_nonce_field(basename(__FILE__), 'movie_fields');    // Get the location data if it's already been entered    $movie_title = get_post_meta($post->ID, 'movie_title', true);    // Output the field    echo '<input type="text" style="width:100%" name="movie_title" value="' . esc_textarea($movie_title) . '">';}/*====================================================================Save the metabox data====================================================================*/function save_movie_meta($post_id, $post){    // Return if the user doesn't have edit permissions.    if (!current_user_can('edit_post', $post_id)) {        return $post_id;    }    // Verify this came from the our screen and with proper authorization,    // because save_post can be triggered at other times.    if (!isset($_POST['movie_title']) || !wp_verify_nonce($_POST['movie_fields'], basename(__FILE__))) {        return $post_id;    }    // Now that we're authenticated, time to save the data.    // This sanitizes the data from the field and saves it into an array $events_meta.    $movie_meta['movie_title'] = esc_textarea($_POST['movie_title']);    // Cycle through the $movie_meta array.    foreach ($movie_meta as $key => $value) :        // Don't store custom data twice        if ('revision' === $post->post_type) {            return;        }        if (get_post_meta($post_id, $key, false)) {            // If the custom field already has a value, update it.            update_post_meta($post_id, $key, $value);        } else {            // If the custom field doesn't have a value, add it.            add_post_meta($post_id, $key, $value);        }        if (!$value) {            // Delete the meta key if there's no value            delete_post_meta($post_id, $key);        }    endforeach;}add_action('save_post', 'save_movie_meta', 1, 2);/*====================================================================Movies Interaction Messages=====================================================================*/function movie_updated_messages($messages){    global $post, $post_ID;    $messages['movie'] = array(        0 => '',        1 => sprintf(__('Movie updated. <a href="%s">View movie</a>'), esc_url(get_permalink($post_ID))),        2 => __('Custom field updated.'),        3 => __('Custom field deleted.'),        4 => __('Movie updated.'),        5 => isset($_GET['revision']) ? sprintf(__('Movie restored to revision from %s'), wp_post_revision_title((int)$_GET['revision'], false)) : false,        6 => sprintf(__('Movie published. <a href="%s">View movie</a>'), esc_url(get_permalink($post_ID))),        7 => __('Product saved.'),        8 => sprintf(__('Movie submitted. <a target="_blank" href="%s">Preview movie</a>'), esc_url(add_query_arg('preview', 'true', get_permalink($post_ID)))),        9 => sprintf(__('Movie scheduled for: <strong>%1$s</strong>. <a target="_blank" href="%2$s">Preview movie</a>'), date_i18n(__('M j, Y @ G:i'), strtotime($post->post_date)), esc_url(get_permalink($post_ID))),        10 => sprintf(__('Movie draft updated. <a target="_blank" href="%s">Preview movie</a>'), esc_url(add_query_arg('preview', 'true', get_permalink($post_ID)))),    );    return $messages;}add_filter('post_updated_messages', 'movie_updated_messages');register_uninstall_hook(__FILE__, 'movies_uninstall');function movies_uninstall(){    // This function will deregister movie post type    unregister_post_type('movie');}function movies_gutenberg_block(){    wp_register_script('gutenberg-movies-block',        plugin_dir_url(__FILE__) . '/js/gutenberg-movies-block.js',        array('wp-blocks'));    register_block_type('moviesadd/block-favorite-movie-quote', array(        'editor_script' => 'gutenberg-movies-block'    ));}add_action('init', 'movies_gutenberg_block');